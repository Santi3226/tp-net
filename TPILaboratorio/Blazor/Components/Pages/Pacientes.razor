@page "/pacientes"
@using DTOs
@using System.Text.RegularExpressions
@using API.Clients
@using Blazor.Components
@inject IJSRuntime JSRuntime
@attribute [StreamRendering]

<PageTitle>Pacientes</PageTitle>

<h1>Pacientes</h1>

<p>Listado de pacientes.</p>


@if (pacientes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>DNI</th>
                <th>Telefono</th>
                <th>Email</th>
                <th>Tipo</th>
                <th>Fecha Nac.</th>
            </tr>
        </thead>
        <tbody>
    @if (pacientes != null && pacientes.Any())
    {
            @foreach (var p in pacientes)
            {
                <tr>
                    <td>@p.Nombre, @p.Apellido</td>
                    <td>@p.Dni</td>
                    <td>@p.Telefono</td>
                    <td>@p.Email</td>
                    <td>@p.Tipo</td>
                    <td>@p.FechaNacimiento</td>
                </tr>
            }
    }
        </tbody>
    </table>
}

<div class="modal-body">
    <EditForm Model="currentPaciente" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        @if (mode == FormMode.Update)
        {
            <div class="mb-3">
                <label class="form-label">Id</label>
                <input type="text" class="form-control" value="@currentPaciente.Id" readonly />
            </div>
        }

        <div class="mb-3">
            <label class="form-label">Nombre *</label>
            <InputText @bind-Value="currentPaciente.Nombre" class="form-control" />
            @if (validationErrors.ContainsKey("Nombre"))
            {
                <div class="text-danger small">@validationErrors["Nombre"]</div>
            }
        </div>

        <div class="mb-3">
            <label class="form-label">Apellido *</label>
            <InputText @bind-Value="currentPaciente.Apellido" class="form-control" />
            @if (validationErrors.ContainsKey("Apellido"))
            {
                <div class="text-danger small">@validationErrors["Apellido"]</div>
            }
        </div>

        <div class="mb-3">
            <label class="form-label">DNI *</label>
            <InputText @bind-Value="currentPaciente.Dni" class="form-control" />
            @if (validationErrors.ContainsKey("Dni"))
            {
                <div class="text-danger small">@validationErrors["Dni"]</div>
            }
        </div>

        <div class="mb-3">
            <label class="form-label">Teléfono *</label>
            <InputText @bind-Value="currentPaciente.Telefono" class="form-control" />
            @if (validationErrors.ContainsKey("Telefono"))
            {
                <div class="text-danger small">@validationErrors["Telefono"]</div>
            }
        </div>

        <div class="mb-3">
            <label class="form-label">Domicilio *</label>
            <InputText @bind-Value="currentPaciente.Domicilio" class="form-control" />
            @if (validationErrors.ContainsKey("Domicilio"))
            {
                <div class="text-danger small">@validationErrors["Domicilio"]</div>
            }
        </div>

        <div class="mb-3">
            <label class="form-label">Email *</label>
            <InputText @bind-Value="currentPaciente.Email" class="form-control" />
            @if (validationErrors.ContainsKey("Email"))
            {
                <div class="text-danger small">@validationErrors["Email"]</div>
            }
        </div>

        <div class="mb-3">
            <label class="form-label">Contraseña *</label>
            <InputText @bind-Value="currentPaciente.Contraseña" class="form-control" type="password" />
            @if (validationErrors.ContainsKey("Contraseña"))
            {
                <div class="text-danger small">@validationErrors["Contraseña"]</div>
            }
        </div>

        <div class="mb-3">
            <label class="form-label">Fecha de Nacimiento *</label>
            <InputDate @bind-Value="currentPaciente.FechaNacimiento" class="form-control" />
            @if (validationErrors.ContainsKey("FechaNacimiento"))
            {
                <div class="text-danger small">@validationErrors["FechaNacimiento"]</div>
            }
        </div>

        <div class="mb-3">
            <label class="form-label">Tipo *</label>
            <InputText @bind-Value="currentPaciente.Tipo" class="form-control" />
            @if (validationErrors.ContainsKey("Tipo"))
            {
                <div class="text-danger small">@validationErrors["Tipo"]</div>
            }
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <div class="modal-footer">
            <button type="submit" class="btn btn-primary" disabled="@saving">
                @if (saving)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                @(mode == FormMode.Add ? "Agregar" : "Actualizar")
            </button>
        </div>
    </EditForm>
</div>

@code {
    private List<PacienteDTO> pacientes;
    private PacienteModal pacienteModal;
    private bool showModal = false;
    [Parameter] public EventCallback OnPacienteChanged { get; set; }
    private FormMode mode = FormMode.Add;
    private PacienteDTO currentPaciente = new PacienteDTO();
    private bool saving = false;
    private string errorMessage = string.Empty;
    private Dictionary<string, string> validationErrors = new Dictionary<string, string>();
    //private List<Clase>? clases -> para un select
    public enum FormMode
    {
        Add,
        Update
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPacientes();
    }

    private async Task LoadPacientes()
    {
        pacientes = (await PacienteApiClient.GetAllAsync())?.ToList();
        StateHasChanged();
    }


    private async Task HandleValidSubmit()
    {
        if (!ValidatePaciente())
            return;

        try
        {
            saving = true;
            errorMessage = string.Empty;

            if (mode == FormMode.Add)
            {
                await PacienteApiClient.AddAsync(currentPaciente);
            }
            else
            {
                await PacienteApiClient.UpdateAsync(currentPaciente);
            }

            await OnPacienteChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            saving = false;
        }
    }

    private bool ValidatePaciente()
    {
        ClearValidationErrors();
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(currentPaciente.Nombre))
        {
            validationErrors["Nombre"] = "El Nombre es requerido";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(currentPaciente.Apellido))
        {
            validationErrors["Apellido"] = "El Apellido es requerido";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(currentPaciente.Dni))
        {
            validationErrors["Dni"] = "El DNI es requerido";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(currentPaciente.Telefono))
        {
            validationErrors["Telefono"] = "El Teléfono es requerido";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(currentPaciente.Domicilio))
        {
            validationErrors["Domicilio"] = "El Domicilio es requerido";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(currentPaciente.Email))
        {
            validationErrors["Email"] = "El Email es requerido";
            isValid = false;
        }
        else if (!IsValidEmail(currentPaciente.Email))
        {
            validationErrors["Email"] = "El formato del Email no es válido";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(currentPaciente.Contraseña))
        {
            validationErrors["Contraseña"] = "La Contraseña es requerida";
            isValid = false;
        }
        if (currentPaciente.FechaNacimiento == default)
        {
            validationErrors["FechaNacimiento"] = "La Fecha de Nacimiento es requerida";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(currentPaciente.Tipo))
        {
            validationErrors["Tipo"] = "El Tipo es requerido";
            isValid = false;
        }
        StateHasChanged();
        return isValid;
    }

    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;
        return Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$");
    }

    private void ClearValidationErrors()
    {
        validationErrors.Clear();
        errorMessage = string.Empty;
    }
}