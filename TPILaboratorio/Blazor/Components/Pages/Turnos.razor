@page "/turnos"
@using DTOs
@using System.Text.RegularExpressions
@using API.Clients
@using Blazor.Components
@using System.Data
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Turnos</PageTitle>

<h1>Turnos</h1>

<p>Listado de Turnos.</p>

@if (turnos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Estado</th>
                <th>Receta</th>
                <th>Observaciones</th>
                <th>Fecha-Hora Reserva</th>
                <th>Paciente</th>
                <th>Tipo de Analisis</th>
                <th>Centro de Atencion</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (turnos != null && turnos.Any())
            {
                @foreach (var p in turnos)
                {
                    <tr>
                        <td>@p.Id</td>
                        <td>@p.Estado</td>
                        <td>@p.Receta</td>
                        <td>@p.Observaciones</td>
                        <td>@p.FechaHoraReserva</td>
                        <td>@p.IdPaciente</td>
                        <td>@p.IdTipoAnalisis</td>
                        <td>@p.IdCentroAtencion</td>
                        <td>
                            <button class="btn btn-sm btn-warning" @onclick="() => LoadForEdit(p)">
                                Editar
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="() => LoadDelete(p)">
                                Eliminar
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

<hr />

<h3>@(mode == FormMode.Add ? "Nuevo Turno" : "Editar Turno")</h3>

<EditForm Model="currentTurno" OnValidSubmit="HandleValidSubmit" FormName="TurnoForm">
    <DataAnnotationsValidator />

    @if (mode == FormMode.Update)
    {
        <div class="mb-3">
            <label class="form-label">Id</label>
            <input type="text" class="form-control" value="@currentTurno.Id" readonly />
        </div>
    }

    <div class="row">

        <div class="col-md-6 mb-3">
            <label class="form-label">Tipo *</label>
            <InputSelect @bind-Value="currentTurno.Estado" class="form-select">
                <option value="">- Seleccione -</option>
                <option value="Pendiente">Pendiente</option>
                <option value="Reservado">Reservado</option>
                <option value="Completado">Completado</option>
            </InputSelect>
            @if (validationErrors.ContainsKey("Estado"))
            {
                <div class="text-danger small">@validationErrors["Estado"]</div>
            }
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Receta *</label>
            <InputText @bind-Value="currentTurno.Receta" class="form-control" />
            @if (validationErrors.ContainsKey("Receta"))
            {
                <div class="text-danger small">@validationErrors["Receta"]</div>
            }
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Observaciones *</label>
        <InputTextArea @bind-Value="currentTurno.Observaciones" class="form-control" rows="3" />
        @if (validationErrors.ContainsKey("Observaciones"))
        {
            <div class="text-danger small">@validationErrors["Observaciones"]</div>
        }
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label class="form-label">Fecha Hora Reserva *</label>
            <InputDate @bind-Value="currentTurno.FechaHoraReserva" class="form-control" />
            @if (validationErrors.ContainsKey("FechaHoraReserva"))
            {
                <div class="text-danger small">@validationErrors["FechaHoraReserva"]</div>
            }
        </div>

        <div class="col-md-6 mb-3">
            <div class="form-check mt-4">
                <InputCheckbox @bind-Value="currentTurno.RecibeMail" class="form-check-input" id="recibeMail" />
                <label class="form-check-label" for="recibeMail">
                    Recibe Mail
                </label>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="mb-3">
            <label class="form-label">Paciente *</label>
            <InputSelect @bind-Value="currentTurno.IdPaciente" class="form-select">
                <option value="">Seleccione un paciente...</option>
                @if (pacientes != null && pacientes.Any())
                {
                    @foreach (var loc in pacientes)
                    {
                        <option value="@loc.Id">@loc.Nombre, @loc.Apellido</option>
                    }
                }
                else
                {
                    <option disabled>Cargando pacientes...</option>
                }
            </InputSelect>
            @if (validationErrors.ContainsKey("IdPaciente"))
            {
                <div class="text-danger small">@validationErrors["IdPaciente"]</div>
            }
        </div>


        <div class="mb-3">
            <label class="form-label">Tipo de Analisis *</label>
            <InputSelect @bind-Value="currentTurno.IdTipoAnalisis" class="form-select">
                <option value="">Seleccione un tipo...</option>
                @if (tipos != null && tipos.Any())
                {
                    @foreach (var loc in tipos)
                    {
                        <option value="@loc.Id">@loc.Nombre</option>
                    }
                }
                else
                {
                    <option disabled>Cargando tipos...</option>
                }
            </InputSelect>
            @if (validationErrors.ContainsKey("IdTipoAnalisis"))
            {
                <div class="text-danger small">@validationErrors["IdTipoAnalisis"]</div>
            }
        </div>


        <div class="mb-3">
            <label class="form-label">Centro de Atencion *</label>
            <InputSelect @bind-Value="currentTurno.IdCentroAtencion" class="form-select">
                <option value="">Seleccione un centro...</option>
                @if (centros != null && centros.Any())
                {
                    @foreach (var loc in centros)
                    {
                        <option value="@loc.Id">@loc.Nombre</option>
                    }
                }
                else
                {
                    <option disabled>Cargando centros...</option>
                }
            </InputSelect>
            @if (validationErrors.ContainsKey("IdCentroAtencion"))
            {
                <div class="text-danger small">@validationErrors["IdCentroAtencion"]</div>
            }
        </div>
        </div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">
            @successMessage
        </div>
    }

    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary" disabled="@saving">
            @if (saving)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            @(mode == FormMode.Add ? "Agregar" : "Actualizar")
        </button>

        @if (mode == FormMode.Update)
        {
            <button type="button" class="btn btn-secondary" @onclick="ResetForm">
                Cancelar
            </button>
        }
    </div>
</EditForm>

<hr />

@code {
    private List<TurnoDTO> turnos;
    private List<CentroAtencionDTO> centros;
    private List<TipoAnalisisDTO> tipos;
    private List<PacienteDTO> pacientes;
    [Parameter] public EventCallback OnTurnoChanged { get; set; }
    private FormMode mode = FormMode.Add;
    private TurnoDTO currentTurno = new TurnoDTO();
    private bool saving = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private Dictionary<string, string> validationErrors = new Dictionary<string, string>();

    public enum FormMode
    {
        Add,
        Update
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTurnos();
    }

    private async Task LoadTurnos()
    {
        turnos = (await TurnoApiClient.GetAllAsync())?.ToList();
        centros = (await CentroAtencionApiClient.GetAllAsync())?.ToList();
        pacientes = (await PacienteApiClient.GetAllAsync())?.ToList();
        tipos = (await TipoAnalisisApiClient.GetAllAsync())?.ToList();
        StateHasChanged();
    }

    private void LoadForEdit(TurnoDTO turno)
    {
        mode = FormMode.Update;
        currentTurno = new TurnoDTO
        {
            Id = turno.Id,
            RecibeMail = turno.RecibeMail,
            Estado = turno.Estado,
            Receta = turno.Receta,
            Observaciones = turno.Observaciones,
            FechaHoraReserva = turno.FechaHoraReserva,
            IdPaciente = turno.IdPaciente,
            IdTipoAnalisis = turno.IdTipoAnalisis,
            IdCentroAtencion = turno.IdCentroAtencion
        };
        ClearValidationErrors();
    }

    private async Task LoadDelete(TurnoDTO turno)
    {
        await TurnoApiClient.DeleteAsync(turno.Id);
        await LoadTurnos();
        await OnTurnoChanged.InvokeAsync();
    }

    private void ResetForm()
    {
        mode = FormMode.Add;
        currentTurno = new TurnoDTO();
        ClearValidationErrors();
    }

    private async Task HandleValidSubmit()
    {
        if (!ValidateTurno())
            return;

        try
        {
            saving = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            if (mode == FormMode.Add)
            {
                currentTurno.Estado = "Pendiente";
                await TurnoApiClient.AddAsync(currentTurno);
                successMessage = "Turno agregado exitosamente";
            }
            else
            {
                await TurnoApiClient.UpdateAsync(currentTurno);
                successMessage = "Turno actualizado exitosamente";
            }

            await LoadTurnos();
            await OnTurnoChanged.InvokeAsync();
            ResetForm();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            saving = false;
        }
    }

    private bool ValidateTurno()
    {
        ClearValidationErrors();
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(currentTurno.Receta))
        {
            validationErrors["Receta"] = "La Receta es requerida";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(currentTurno.Observaciones))
        {
            currentTurno.Observaciones = "-";
        }
        if (currentTurno.FechaHoraReserva == default)
        {
            validationErrors["FechaHoraReserva"] = "La Fecha de Reserva es requerida";
            isValid = false;
        }
        if (currentTurno.FechaHoraReserva < DateTime.Today)
        {
            validationErrors["FechaHoraReserva"] = "La Fecha de Reserva debe ser Mayor a hoy";
            isValid = false;
        }
        if (currentTurno.IdPaciente == null || currentTurno.IdPaciente == 0)
        {
            validationErrors["IdPaciente"] = "El ID de Paciente es requerido";
            isValid = false;
        }
        if (currentTurno.IdTipoAnalisis == null || currentTurno.IdTipoAnalisis == 0)
        {
            validationErrors["IdTipoAnalisis"] = "El ID de Tipo de Análisis es requerido";
            isValid = false;
        }
        if (currentTurno.IdCentroAtencion == null || currentTurno.IdCentroAtencion == 0)
        {
            validationErrors["IdCentroAtencion"] = "El ID de Centro de Atención es requerido";
            isValid = false;
        }
        StateHasChanged();
        return isValid;
    }

    private void ClearValidationErrors()
    {
        validationErrors.Clear();
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }
}